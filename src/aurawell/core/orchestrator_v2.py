"""
AuraWell Health Orchestrator v2

The core orchestration engine that coordinates health data analysis,
AI-powered insights generation, and personalized health plan creation.
"""

import logging
from datetime import datetime, timezone, timedelta
from typing import Dict, List, Optional, Any
from dataclasses import dataclass

from ..models.enums import InsightType, InsightPriority

logger = logging.getLogger(__name__)

# Import the unified HealthPlan model from API models
try:
    from ..models import HealthPlan, HealthPlanModule
except ImportError:
    # Fallback for development/testing
    logger.warning("Could not import HealthPlan from models, using local definition")

    @dataclass
    class HealthPlan:
        """Fallback HealthPlan definition for compatibility"""

        plan_id: str
        title: str
        description: str
        modules: List[Dict[str, Any]]
        duration_days: int
        status: str = "active"
        progress: float = 0.0
        created_at: datetime = None
        updated_at: datetime = None


@dataclass
class HealthInsight:
    """Represents a health insight generated by AI analysis"""

    insight_id: str
    insight_type: InsightType
    priority: InsightPriority
    title: str
    description: str
    recommendations: List[str]
    data_points: Dict[str, Any]
    confidence_score: float  # 0.0 to 1.0
    generated_at: datetime
    expires_at: Optional[datetime] = None


# Note: HealthPlan model is now imported from api_models to maintain consistency
# This dataclass is kept for backward compatibility but should be migrated to use the API model


class AuraWellOrchestrator:
    """
    Core orchestration engine for AuraWell health management

    Coordinates between AI analysis, health data processing,
    and personalized recommendation generation.
    """

    def __init__(self, deepseek_client=None):
        """
        Initialize the orchestrator

        Args:
            deepseek_client: Optional DeepSeek client instance
        """
        # Lazy import to avoid circular dependencies
        if deepseek_client is None:
            try:
                from .deepseek_client import DeepSeekClient

                self.deepseek_client = DeepSeekClient()
            except Exception as e:
                logger.warning(f"Failed to initialize DeepSeek client: {e}")
                self.deepseek_client = None
        else:
            self.deepseek_client = deepseek_client

        self.insights_cache: Dict[str, List[HealthInsight]] = {}
        self.plans_cache: Dict[str, HealthPlan] = {}

        logger.info("AuraWell Orchestrator v2 initialized")

    def analyze_user_health_data(
        self,
        user_profile: Dict[str, Any],
        activity_data: List[Dict[str, Any]] = None,
        sleep_data: List[Dict[str, Any]] = None,
        heart_rate_data: List[Dict[str, Any]] = None,
        nutrition_data: List[Dict[str, Any]] = None,
    ) -> List[HealthInsight]:
        """
        Analyze comprehensive user health data and generate insights

        Args:
            user_profile: User profile information as dict
            activity_data: Recent activity summaries as list of dicts
            sleep_data: Recent sleep sessions as list of dicts
            heart_rate_data: Recent heart rate measurements as list of dicts
            nutrition_data: Recent nutrition entries as list of dicts

        Returns:
            List of generated health insights
        """
        user_id = user_profile.get("user_id", "unknown")
        logger.info(f"Analyzing health data for user {user_id}")

        insights = []

        # Generate different types of insights
        if activity_data:
            insights.extend(
                self._analyze_activity_patterns(user_profile, activity_data)
            )
        if sleep_data:
            insights.extend(self._analyze_sleep_quality(user_profile, sleep_data))
        if nutrition_data:
            insights.extend(
                self._analyze_nutrition_balance(user_profile, nutrition_data)
            )
        if activity_data or sleep_data:
            insights.extend(
                self._analyze_goal_progress(
                    user_profile, activity_data or [], sleep_data or []
                )
            )

        # Generate AI insights if client is available
        if self.deepseek_client:
            insights.extend(
                self._generate_ai_insights(
                    user_profile, activity_data, sleep_data, nutrition_data
                )
            )

        # Cache insights
        self.insights_cache[user_id] = insights

        logger.info(f"Generated {len(insights)} insights for user {user_id}")
        return insights

    def create_personalized_health_plan(
        self,
        user_profile: Dict[str, Any],
        user_preferences: Dict[str, Any] = None,
        recent_insights: List[HealthInsight] = None,
    ) -> HealthPlan:
        """
        Create a personalized health plan based on user data and insights

        Args:
            user_profile: User profile information as dict
            user_preferences: User preferences and goals as dict
            recent_insights: Recent health insights

        Returns:
            Personalized health plan
        """
        user_id = user_profile.get("user_id", "unknown")
        logger.info(f"Creating health plan for user {user_id}")

        plan_id = f"plan_{user_id}_{int(datetime.now().timestamp())}"

        # Generate AI-powered health plan if client is available
        if self.deepseek_client and user_preferences and recent_insights:
            plan_content = self._generate_ai_health_plan(
                user_profile, user_preferences, recent_insights
            )
        else:
            plan_content = self._get_default_health_plan(user_profile)

        # Create modules from plan content
        modules = []
        if "modules" in plan_content:
            for module_data in plan_content["modules"]:
                try:
                    module = HealthPlanModule(
                        module_type=module_data.get("type", "general"),
                        title=module_data.get("title", "健康模块"),
                        description=module_data.get("description", ""),
                        content=module_data.get("content", {}),
                        duration_days=plan_content.get("duration_days", 30),
                    )
                    modules.append(module)
                except Exception as e:
                    logger.warning(f"Failed to create module: {e}")
                    # Fallback to dict format for compatibility
                    modules.append(module_data)

        health_plan = HealthPlan(
            plan_id=plan_id,
            title=plan_content.get("title", "个性化健康计划"),
            description=plan_content.get(
                "description", "基于您的健康数据和目标制定的个性化计划"
            ),
            modules=modules,
            duration_days=plan_content.get("duration_days", 30),
            status="active",
            progress=0.0,
            created_at=datetime.now(timezone.utc),
            updated_at=datetime.now(timezone.utc),
        )

        # Cache the plan
        self.plans_cache[user_id] = health_plan

        logger.info(f"Created health plan {plan_id} for user {user_id}")
        return health_plan

    def get_daily_recommendations(
        self, user_id: str, target_date: Optional[datetime] = None
    ) -> List[Dict[str, Any]]:
        """
        Get daily recommendations for a user

        Args:
            user_id: User identifier
            target_date: Target date for recommendations (default: today)

        Returns:
            List of daily recommendations
        """
        if target_date is None:
            target_date = datetime.now(timezone.utc)

        logger.info(f"Getting daily recommendations for user {user_id}")

        # Get cached plan if available
        if user_id in self.plans_cache:
            plan = self.plans_cache[user_id]
            if plan.valid_until > datetime.now(timezone.utc):
                return plan.daily_recommendations

        # Generate new recommendations if no valid plan exists
        return self._generate_daily_recommendations(user_id, target_date)

    def get_system_status(self) -> Dict[str, Any]:
        """Get system status information"""
        return {
            "cached_users": len(self.insights_cache),
            "cached_plans": len(self.plans_cache),
            "deepseek_client_status": (
                "connected" if self.deepseek_client else "disconnected"
            ),
            "last_updated": datetime.now(timezone.utc).isoformat(),
        }

    def _analyze_activity_patterns(
        self, user_profile: Dict[str, Any], activity_data: List[Dict[str, Any]]
    ) -> List[HealthInsight]:
        """Analyze activity patterns and generate insights"""
        insights = []

        if not activity_data:
            return insights

        # Calculate average daily steps
        total_steps = sum(data.get("steps", 0) for data in activity_data)
        avg_steps = total_steps / len(activity_data)

        # Check against user's goal
        steps_goal = user_profile.get("daily_steps_goal", 10000)
        goal_achievement = (avg_steps / steps_goal) * 100

        if goal_achievement < 70:
            insights.append(
                HealthInsight(
                    insight_id=f"activity_low_{user_profile.get('user_id')}_{int(datetime.now().timestamp())}",
                    insight_type=InsightType.ACTIVITY_PATTERN,
                    priority=InsightPriority.MEDIUM,
                    title="步数目标完成度较低",
                    description=f"最近平均每日步数为 {int(avg_steps)} 步，仅达到目标的 {goal_achievement:.1f}%",
                    recommendations=[
                        "尝试在日常生活中增加更多步行机会",
                        "设置每小时提醒，进行短暂的步行",
                        "选择楼梯而不是电梯",
                    ],
                    data_points={
                        "avg_steps": avg_steps,
                        "goal_steps": steps_goal,
                        "achievement_percentage": goal_achievement,
                    },
                    confidence_score=0.9,
                    generated_at=datetime.now(timezone.utc),
                )
            )
        elif goal_achievement > 120:
            insights.append(
                HealthInsight(
                    insight_id=f"activity_high_{user_profile.get('user_id')}_{int(datetime.now().timestamp())}",
                    insight_type=InsightType.ACTIVITY_PATTERN,
                    priority=InsightPriority.LOW,
                    title="步数目标超额完成",
                    description=f"最近平均每日步数为 {int(avg_steps)} 步，超出目标 {goal_achievement-100:.1f}%",
                    recommendations=[
                        "保持当前的活动水平",
                        "考虑设置更高的步数目标",
                        "注意适当休息，避免过度运动",
                    ],
                    data_points={
                        "avg_steps": avg_steps,
                        "goal_steps": steps_goal,
                        "achievement_percentage": goal_achievement,
                    },
                    confidence_score=0.9,
                    generated_at=datetime.now(timezone.utc),
                )
            )

        return insights

    def _analyze_sleep_quality(
        self, user_profile: Dict[str, Any], sleep_data: List[Dict[str, Any]]
    ) -> List[HealthInsight]:
        """Analyze sleep quality and generate insights"""
        insights = []

        if not sleep_data:
            return insights

        # Calculate average sleep duration
        total_duration = sum(data.get("duration_hours", 0) for data in sleep_data)
        avg_duration = total_duration / len(sleep_data)

        sleep_goal = user_profile.get("sleep_duration_goal_hours", 8.0)

        if avg_duration < 6.5:
            insights.append(
                HealthInsight(
                    insight_id=f"sleep_short_{user_profile.get('user_id')}_{int(datetime.now().timestamp())}",
                    insight_type=InsightType.SLEEP_QUALITY,
                    priority=InsightPriority.HIGH,
                    title="睡眠时间不足",
                    description=f"最近平均睡眠时间为 {avg_duration:.1f} 小时，低于推荐的 7-9 小时",
                    recommendations=[
                        "建立规律的睡眠时间表",
                        "睡前1小时避免使用电子设备",
                        "创造舒适的睡眠环境",
                    ],
                    data_points={
                        "avg_sleep_hours": avg_duration,
                        "goal_sleep_hours": sleep_goal,
                        "sleep_deficit": sleep_goal - avg_duration,
                    },
                    confidence_score=0.95,
                    generated_at=datetime.now(timezone.utc),
                )
            )

        return insights

    def _analyze_nutrition_balance(
        self, user_profile: Dict[str, Any], nutrition_data: List[Dict[str, Any]]
    ) -> List[HealthInsight]:
        """Analyze nutrition balance and generate insights"""
        insights = []

        if not nutrition_data:
            return insights

        # Calculate average daily calories
        total_calories = sum(data.get("calories", 0) for data in nutrition_data)
        avg_calories = total_calories / len(nutrition_data)

        # Simple calorie recommendation (in production, would use proper BMR/TDEE calculation)
        estimated_needs = 2000  # Simplified
        calorie_ratio = avg_calories / estimated_needs

        if calorie_ratio < 0.8:
            insights.append(
                HealthInsight(
                    insight_id=f"nutrition_low_{user_profile.get('user_id')}_{int(datetime.now().timestamp())}",
                    insight_type=InsightType.NUTRITION_BALANCE,
                    priority=InsightPriority.MEDIUM,
                    title="卡路里摄入不足",
                    description=f"平均每日摄入 {int(avg_calories)} 卡路里，低于建议的 {int(estimated_needs)} 卡路里",
                    recommendations=[
                        "增加健康的高热量食物",
                        "确保三餐规律",
                        "添加健康的零食",
                    ],
                    data_points={
                        "avg_calories": avg_calories,
                        "recommended_calories": estimated_needs,
                        "calorie_deficit": estimated_needs - avg_calories,
                    },
                    confidence_score=0.85,
                    generated_at=datetime.now(timezone.utc),
                )
            )
        elif calorie_ratio > 1.2:
            insights.append(
                HealthInsight(
                    insight_id=f"nutrition_high_{user_profile.get('user_id')}_{int(datetime.now().timestamp())}",
                    insight_type=InsightType.NUTRITION_BALANCE,
                    priority=InsightPriority.MEDIUM,
                    title="卡路里摄入过多",
                    description=f"平均每日摄入 {int(avg_calories)} 卡路里，高于建议的 {int(estimated_needs)} 卡路里",
                    recommendations=[
                        "控制食物分量",
                        "选择低热量高营养的食物",
                        "增加运动量",
                    ],
                    data_points={
                        "avg_calories": avg_calories,
                        "recommended_calories": estimated_needs,
                        "calorie_excess": avg_calories - estimated_needs,
                    },
                    confidence_score=0.85,
                    generated_at=datetime.now(timezone.utc),
                )
            )

        return insights

    def _analyze_goal_progress(
        self,
        user_profile: Dict[str, Any],
        activity_data: List[Dict[str, Any]],
        sleep_data: List[Dict[str, Any]],
    ) -> List[HealthInsight]:
        """Analyze progress towards health goals"""
        insights = []

        # Analyze overall goal progress
        progress_score = 0
        total_goals = 0

        # Steps goal progress
        if activity_data and user_profile.get("daily_steps_goal"):
            avg_steps = sum(data.get("steps", 0) for data in activity_data) / len(
                activity_data
            )
            steps_progress = min(avg_steps / user_profile["daily_steps_goal"], 1.0)
            progress_score += steps_progress
            total_goals += 1

        # Sleep goal progress
        if sleep_data and user_profile.get("sleep_duration_goal_hours"):
            avg_sleep = sum(data.get("duration_hours", 0) for data in sleep_data) / len(
                sleep_data
            )
            sleep_progress = min(
                avg_sleep / user_profile["sleep_duration_goal_hours"], 1.0
            )
            progress_score += sleep_progress
            total_goals += 1

        if total_goals > 0:
            overall_progress = (progress_score / total_goals) * 100

            insights.append(
                HealthInsight(
                    insight_id=f"goal_progress_{user_profile.get('user_id')}_{int(datetime.now().timestamp())}",
                    insight_type=InsightType.GOAL_PROGRESS,
                    priority=InsightPriority.LOW,
                    title=f"整体目标完成度: {overall_progress:.1f}%",
                    description=f"您的健康目标整体完成度为 {overall_progress:.1f}%",
                    recommendations=[
                        "继续保持良好的健康习惯",
                        "关注完成度较低的目标",
                        "适当调整目标以保持挑战性",
                    ],
                    data_points={
                        "overall_progress": overall_progress,
                        "goals_tracked": total_goals,
                    },
                    confidence_score=0.9,
                    generated_at=datetime.now(timezone.utc),
                )
            )

        return insights

    def _generate_ai_insights(
        self,
        user_profile: Dict[str, Any],
        activity_data: List[Dict[str, Any]],
        sleep_data: List[Dict[str, Any]],
        nutrition_data: List[Dict[str, Any]],
    ) -> List[HealthInsight]:
        """Generate AI-powered insights using DeepSeek"""
        insights = []

        try:
            # Prepare data summary for AI analysis
            data_summary = self._prepare_data_summary(
                user_profile, activity_data, sleep_data, nutrition_data
            )

            # Create AI prompt
            messages = [
                {
                    "role": "system",
                    "content": "你是AuraWell的健康分析专家。基于用户的健康数据，提供专业的健康洞察和建议。",
                },
                {
                    "role": "user",
                    "content": f"请分析以下健康数据并提供洞察：\n{data_summary}",
                },
            ]

            # Get AI response
            response = self.deepseek_client.get_deepseek_response(
                messages=messages, temperature=0.3
            )

            # Parse AI insights (simplified)
            ai_insight = HealthInsight(
                insight_id=f"ai_insight_{user_profile.get('user_id')}_{int(datetime.now().timestamp())}",
                insight_type=InsightType.RECOMMENDATION,
                priority=InsightPriority.MEDIUM,
                title="AI健康分析",
                description=(
                    response.content[:200] + "..."
                    if len(response.content) > 200
                    else response.content
                ),
                recommendations=["基于AI分析的个性化建议"],
                data_points={"ai_analysis": response.content},
                confidence_score=0.8,
                generated_at=datetime.now(timezone.utc),
            )

            insights.append(ai_insight)

        except Exception as e:
            logger.error(f"Failed to generate AI insights: {e}")

        return insights

    def _generate_ai_health_plan(
        self,
        user_profile: Dict[str, Any],
        user_preferences: Dict[str, Any],
        recent_insights: List[HealthInsight],
    ) -> Dict[str, Any]:
        """Generate AI-powered health plan"""
        try:
            # Prepare context for AI
            context = {
                "user_profile": user_profile,
                "preferences": user_preferences,
                "recent_insights": [
                    {
                        "type": insight.insight_type.value,
                        "priority": insight.priority.value,
                        "title": insight.title,
                    }
                    for insight in recent_insights[:5]  # Top 5 insights
                ],
            }

            messages = [
                {
                    "role": "system",
                    "content": "你是AuraWell的健康计划专家。基于用户信息和健康洞察，制定个性化的30天健康计划。",
                },
                {"role": "user", "content": f"请为以下用户制定健康计划：\n{context}"},
            ]

            response = self.deepseek_client.get_deepseek_response(
                messages=messages, temperature=0.5
            )

            # Return structured plan (simplified)
            return {
                "title": "AI个性化健康计划",
                "description": response.content,
                "goals": [
                    {
                        "type": "daily_steps",
                        "target": user_profile.get("daily_steps_goal", 10000),
                    },
                    {
                        "type": "sleep_hours",
                        "target": user_profile.get("sleep_duration_goal_hours", 8.0),
                    },
                ],
                "daily_recommendations": [
                    {
                        "time": "morning",
                        "title": "晨间运动",
                        "activity": "晨间运动",
                        "duration": 30,
                    },
                    {
                        "time": "evening",
                        "title": "放松活动",
                        "activity": "放松活动",
                        "duration": 15,
                    },
                ],
                "weekly_targets": {"exercise_sessions": 3, "meditation_sessions": 5},
            }

        except Exception as e:
            logger.error(f"Failed to generate AI health plan: {e}")
            return self._get_default_health_plan(user_profile)

    def _prepare_data_summary(
        self,
        user_profile: Dict[str, Any],
        activity_data: List[Dict[str, Any]],
        sleep_data: List[Dict[str, Any]],
        nutrition_data: List[Dict[str, Any]],
    ) -> str:
        """Prepare a summary of health data for AI analysis"""
        summary_parts = []

        # User profile summary
        age = user_profile.get("age", "未知")
        gender = user_profile.get("gender", "未知")
        summary_parts.append(f"用户信息: {age}岁, {gender}")

        # Activity summary
        if activity_data:
            avg_steps = sum(data.get("steps", 0) for data in activity_data) / len(
                activity_data
            )
            summary_parts.append(
                f"活动数据: 最近{len(activity_data)}天平均步数{int(avg_steps)}步"
            )

        # Sleep summary
        if sleep_data:
            avg_sleep = sum(data.get("duration_hours", 0) for data in sleep_data) / len(
                sleep_data
            )
            summary_parts.append(
                f"睡眠数据: 最近{len(sleep_data)}天平均睡眠{avg_sleep:.1f}小时"
            )

        # Nutrition summary
        if nutrition_data:
            avg_calories = sum(
                data.get("calories", 0) for data in nutrition_data
            ) / len(nutrition_data)
            summary_parts.append(
                f"营养数据: 最近{len(nutrition_data)}天平均摄入{int(avg_calories)}卡路里"
            )

        return "; ".join(summary_parts)

    def _generate_daily_recommendations(
        self, user_id: str, target_date: datetime
    ) -> List[Dict[str, Any]]:
        """Generate daily recommendations for a user"""
        # Default recommendations (in production, this would be more sophisticated)
        return [
            {
                "time": "morning",
                "type": "exercise",
                "title": "晨间步行",
                "description": "进行20-30分钟的轻松步行",
                "duration_minutes": 25,
                "priority": "medium",
            },
            {
                "time": "afternoon",
                "type": "hydration",
                "title": "补充水分",
                "description": "确保已饮用足够的水",
                "priority": "high",
            },
            {
                "time": "evening",
                "type": "relaxation",
                "title": "放松活动",
                "description": "进行冥想或深呼吸练习",
                "duration_minutes": 10,
                "priority": "low",
            },
        ]

    def _get_default_health_plan(self, user_profile: Dict[str, Any]) -> Dict[str, Any]:
        """Get default health plan when AI generation fails"""
        return {
            "title": "基础健康计划",
            "description": "基于您的基本信息制定的健康计划",
            "duration_days": 30,
            "modules": [
                {
                    "type": "exercise",
                    "title": "基础运动计划",
                    "description": "适合初学者的运动方案",
                    "content": {
                        "daily_steps_goal": user_profile.get("daily_steps_goal", 10000),
                        "weekly_sessions": 3,
                        "session_duration": 30,
                    },
                },
                {
                    "type": "sleep",
                    "title": "睡眠管理计划",
                    "description": "改善睡眠质量的建议",
                    "content": {
                        "target_hours": user_profile.get(
                            "sleep_duration_goal_hours", 8.0
                        ),
                        "bedtime_routine": ["避免电子设备", "放松活动", "规律作息"],
                    },
                },
            ],
            "goals": [
                {
                    "type": "daily_steps",
                    "target": user_profile.get("daily_steps_goal", 10000),
                },
                {
                    "type": "sleep_hours",
                    "target": user_profile.get("sleep_duration_goal_hours", 8.0),
                },
            ],
            "daily_recommendations": [
                {
                    "time": "morning",
                    "title": "轻度运动",
                    "activity": "轻度运动",
                    "duration": 30,
                },
                {
                    "time": "evening",
                    "title": "放松时间",
                    "activity": "放松时间",
                    "duration": 15,
                },
            ],
            "weekly_targets": {"exercise_sessions": 3, "rest_days": 1},
        }

    def get_user_insights(self, user_id: str) -> List[HealthInsight]:
        """Get cached insights for a user"""
        return self.insights_cache.get(user_id, [])

    def get_user_health_plan(self, user_id: str) -> Optional[HealthPlan]:
        """Get cached health plan for a user"""
        return self.plans_cache.get(user_id)

    def clear_user_cache(self, user_id: str) -> None:
        """Clear cached data for a user"""
        self.insights_cache.pop(user_id, None)
        self.plans_cache.pop(user_id, None)
        logger.info(f"Cleared cache for user {user_id}")
