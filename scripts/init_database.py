#!/usr/bin/env python3
"""
Êï∞ÊçÆÂ∫ìÂàùÂßãÂåñËÑöÊú¨

Áî®‰∫éÂàùÂßãÂåñAuraWellÈ°πÁõÆÁöÑÊï∞ÊçÆÂ∫ìÔºåÂàõÂª∫ÊâÄÊúâÂøÖË¶ÅÁöÑË°®ÁªìÊûÑ„ÄÇ
"""

import asyncio
import logging
import sys
from pathlib import Path

# Ê∑ªÂä†È°πÁõÆÊ†πÁõÆÂΩïÂà∞PythonË∑ØÂæÑ
project_root = Path(__file__).parent.parent  # Go up one level from scripts to project root
sys.path.insert(0, str(project_root / "src"))

from aurawell.database.connection import DatabaseManager, init_database
from aurawell.database.migrations import DatabaseMigrator, init_database_schema
from aurawell.config.settings import AuraWellSettings

# ÈÖçÁΩÆÊó•Âøó
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)


async def main():
    """‰∏ªÂáΩÊï∞ÔºöÂàùÂßãÂåñÊï∞ÊçÆÂ∫ì"""
    
    logger.info("üöÄ ÂºÄÂßãÂàùÂßãÂåñAuraWellÊï∞ÊçÆÂ∫ì...")
    
    try:
        # 1. Ê£ÄÊü•ÈÖçÁΩÆ
        logger.info("üìã Ê£ÄÊü•Êï∞ÊçÆÂ∫ìÈÖçÁΩÆ...")
        
        # Ëé∑ÂèñÊï∞ÊçÆÂ∫ìURLÔºåÂ¶ÇÊûúÊ≤°ÊúâÈÖçÁΩÆÂàô‰ΩøÁî®ÈªòËÆ§SQLite
        db_url = AuraWellSettings.DATABASE_URL
        if not db_url:
            db_url = "sqlite+aiosqlite:///aurawell.db"
            logger.info(f"‰ΩøÁî®ÈªòËÆ§SQLiteÊï∞ÊçÆÂ∫ì: {db_url}")
        else:
            logger.info(f"‰ΩøÁî®ÈÖçÁΩÆÁöÑÊï∞ÊçÆÂ∫ì: {db_url}")
        
        # 2. ÂàùÂßãÂåñÊï∞ÊçÆÂ∫ìÁÆ°ÁêÜÂô®
        logger.info("üîß ÂàùÂßãÂåñÊï∞ÊçÆÂ∫ìÁÆ°ÁêÜÂô®...")
        db_manager = DatabaseManager(db_url)
        migrator = DatabaseMigrator(db_manager)
        
        # 3. Ê£ÄÊü•Êï∞ÊçÆÂ∫ìÊòØÂê¶Â∑≤Â≠òÂú®
        logger.info("üîç Ê£ÄÊü•Áé∞ÊúâÊï∞ÊçÆÂ∫ìÁä∂ÊÄÅ...")
        await db_manager.initialize()
        
        table_info = await migrator.get_table_info()
        if table_info:
            logger.info(f"ÂèëÁé∞Áé∞ÊúâË°®: {list(table_info.keys())}")
            
            # ËØ¢ÈóÆÊòØÂê¶ÈáçÁΩÆÊï∞ÊçÆÂ∫ì
            response = input("Êï∞ÊçÆÂ∫ìÂ∑≤Â≠òÂú®ÔºåÊòØÂê¶Ë¶ÅÈáçÁΩÆÔºü(y/N): ").strip().lower()
            if response in ['y', 'yes']:
                logger.warning("üóëÔ∏è  ÈáçÁΩÆÊï∞ÊçÆÂ∫ì...")
                success = await migrator.reset_database()
                if not success:
                    logger.error("‚ùå Êï∞ÊçÆÂ∫ìÈáçÁΩÆÂ§±Ë¥•")
                    return False
                logger.info("‚úÖ Êï∞ÊçÆÂ∫ìÈáçÁΩÆÊàêÂäü")
            else:
                logger.info("‰øùÊåÅÁé∞ÊúâÊï∞ÊçÆÂ∫ì‰∏çÂèò")
        else:
            # 4. ÂàõÂª∫Êï∞ÊçÆÂ∫ìË°®
            logger.info("üìä ÂàõÂª∫Êï∞ÊçÆÂ∫ìË°®...")
            success = await migrator.create_tables()
            if not success:
                logger.error("‚ùå Êï∞ÊçÆÂ∫ìË°®ÂàõÂª∫Â§±Ë¥•")
                return False
            logger.info("‚úÖ Êï∞ÊçÆÂ∫ìË°®ÂàõÂª∫ÊàêÂäü")
        
        # 5. È™åËØÅÊï∞ÊçÆÂ∫ìÁªìÊûÑ
        logger.info("üîç È™åËØÅÊï∞ÊçÆÂ∫ìÁªìÊûÑ...")
        is_valid = await migrator.validate_schema()
        if not is_valid:
            logger.error("‚ùå Êï∞ÊçÆÂ∫ìÁªìÊûÑÈ™åËØÅÂ§±Ë¥•")
            return False
        logger.info("‚úÖ Êï∞ÊçÆÂ∫ìÁªìÊûÑÈ™åËØÅÈÄöËøá")
        
        # 6. ÊòæÁ§∫Êï∞ÊçÆÂ∫ì‰ø°ÊÅØ
        logger.info("üìà Êï∞ÊçÆÂ∫ì‰ø°ÊÅØ:")
        table_info = await migrator.get_table_info()
        for table_name, info in table_info.items():
            logger.info(f"  - {table_name}: {info['column_count']} Âàó")
        
        # 7. ÊµãËØïÊï∞ÊçÆÂ∫ìËøûÊé•
        logger.info("üîó ÊµãËØïÊï∞ÊçÆÂ∫ìËøûÊé•...")
        is_healthy = await db_manager.health_check()
        if not is_healthy:
            logger.error("‚ùå Êï∞ÊçÆÂ∫ìËøûÊé•ÊµãËØïÂ§±Ë¥•")
            return False
        logger.info("‚úÖ Êï∞ÊçÆÂ∫ìËøûÊé•Ê≠£Â∏∏")
        
        # 8. ÂàõÂª∫Â§á‰ªΩÔºàÂ¶ÇÊûúÊòØSQLiteÔºâ
        if db_url.startswith("sqlite"):
            logger.info("üíæ ÂàõÂª∫Êï∞ÊçÆÂ∫ìÂ§á‰ªΩ...")
            backup_success = await migrator.backup_database()
            if backup_success:
                logger.info("‚úÖ Êï∞ÊçÆÂ∫ìÂ§á‰ªΩÂàõÂª∫ÊàêÂäü")
        
        logger.info("üéâ Êï∞ÊçÆÂ∫ìÂàùÂßãÂåñÂÆåÊàêÔºÅ")
        logger.info(f"Êï∞ÊçÆÂ∫ì‰ΩçÁΩÆ: {db_url}")
        logger.info(f"ÊÄªË°®Êï∞: {len(table_info)}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Êï∞ÊçÆÂ∫ìÂàùÂßãÂåñÂ§±Ë¥•: {e}")
        return False
    
    finally:
        # ÂÖ≥Èó≠Êï∞ÊçÆÂ∫ìËøûÊé•
        if 'db_manager' in locals():
            await db_manager.close()


def print_usage():
    """ÊâìÂç∞‰ΩøÁî®ËØ¥Êòé"""
    print("""
üè• AuraWell Êï∞ÊçÆÂ∫ìÂàùÂßãÂåñÂ∑•ÂÖ∑

Áî®Ê≥ï:
    python init_database.py

ÂäüËÉΩ:
    - Ëá™Âä®Ê£ÄÊµãÊï∞ÊçÆÂ∫ìÈÖçÁΩÆ
    - ÂàõÂª∫ÊâÄÊúâÂøÖË¶ÅÁöÑÊï∞ÊçÆË°®
    - È™åËØÅÊï∞ÊçÆÂ∫ìÁªìÊûÑ
    - ÊµãËØïÊï∞ÊçÆÂ∫ìËøûÊé•
    - ÂàõÂª∫Êï∞ÊçÆÂ∫ìÂ§á‰ªΩ

Êï∞ÊçÆÂ∫ìË°®ÂåÖÊã¨:
    üìä Áî®Êà∑ÁÆ°ÁêÜ: user_profiles, user_health_profiles
    üèÉ ÂÅ•Â∫∑Êï∞ÊçÆ: activity_summaries, sleep_sessions, heart_rate_samples, nutrition_entries
    üìã ÂÅ•Â∫∑ËÆ°Âàí: health_plans, health_plan_modules, health_plan_progress, health_plan_feedback
    üí¨ ÂØπËØùÁ≥ªÁªü: conversations, messages
    üèÜ ÊàêÂ∞±Á≥ªÁªü: achievement_progress
    üîó Âπ≥Âè∞ËøûÊé•: platform_connections

Ê≥®ÊÑè: ËØ∑Á°Æ‰øùÂ∑≤Ê≠£Á°ÆÈÖçÁΩÆ .env Êñá‰ª∂‰∏≠ÁöÑÊï∞ÊçÆÂ∫ìËÆæÁΩÆ
    """)


if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] in ['-h', '--help', 'help']:
        print_usage()
    else:
        try:
            success = asyncio.run(main())
            sys.exit(0 if success else 1)
        except KeyboardInterrupt:
            logger.info("Áî®Êà∑‰∏≠Êñ≠Êìç‰Ωú")
            sys.exit(1)
        except Exception as e:
            logger.error(f"Á®ãÂ∫èÂºÇÂ∏∏: {e}")
            sys.exit(1)
